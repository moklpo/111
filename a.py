import yfinance as yf import pandas as pd import numpy as np import matplotlib.pyplot as plt import os from datetime import datetime, timedelta from telegram import Update from telegram.ext import Application, CommandHandler, ContextTypes # Replace with your bot token API_TOKEN = '7495228838:AAFhekJs3ek9YLOUMvvXqN-wuQsSBdocPCQ' # NSE F&O Stocks List (October 2025, official NSE) FO_STOCKS = [ '360ONE.NS', 'ABB.NS', 'APLAPOLLO.NS', 'AUBANK.NS', 'ADANIENSOL.NS', 'ADANIENT.NS', 'ADANIGREEN.NS', 'ADANIPORTS.NS', 'ABCAPITAL.NS', 'ALKEM.NS', 'AMBER.NS', 'AMBUJACEM.NS', 'ANGELONE.NS', 'APOLLOHOSP.NS', 'ASHOKLEY.NS', 'ASIANPAINT.NS', 'ASTRAL.NS', 'AUROPHARMA.NS', 'DMART.NS', 'AXISBANK.NS', 'BSE.NS', 'BAJAJ-AUTO.NS', 'BAJFINANCE.NS', 'BAJAJFINSV.NS', 'BANDHANBNK.NS', 'BANKBARODA.NS', 'BANKINDIA.NS', 'BDL.NS', 'BEL.NS', 'BHARATFORG.NS', 'BHEL.NS', 'BPCL.NS', 'BHARTIARTL.NS', 'BIOCON.NS', 'BLUESTARCO.NS', 'BOSCHLTD.NS', 'BRITANNIA.NS', 'CGPOWER.NS', 'CANBK.NS', 'CDSL.NS', 'CHOLAFIN.NS', 'CIPLA.NS', 'COALINDIA.NS', 'COFORGE.NS', 'COLPAL.NS', 'CAMS.NS', 'CONCOR.NS', 'CROMPTON.NS', 'CUMMINSIND.NS', 'CYIENT.NS', 'DLF.NS', 'DABUR.NS', 'DALBHARAT.NS', 'DELHIVERY.NS', 'DIVISLAB.NS', 'DIXON.NS', 'DRREDDY.NS', 'ETERNAL.NS', 'EICHERMOT.NS', 'EXIDEIND.NS', 'NYKAA.NS', 'FORTIS.NS', 'GAIL.NS', 'GMRAIRPORT.NS', 'GLENMARK.NS', 'GODREJCP.NS', 'GODREJPROP.NS', 'GRASIM.NS', 'HCLTECH.NS', 'HDFCAMC.NS', 'HDFCBANK.NS', 'HDFCLIFE.NS', 'HFCL.NS', 'HAVELLS.NS', 'HEROMOTOCO.NS', 'HINDALCO.NS', 'HAL.NS', 'HINDPETRO.NS', 'HINDUNILVR.NS', 'HINDZINC.NS', 'POWERINDIA.NS', 'HUDCO.NS', 'ICICIBANK.NS', 'ICICIGI.NS', 'ICICIPRULI.NS', 'IDFCFIRSTB.NS', 'IIFL.NS', 'ITC.NS', 'INDIANB.NS', 'IEX.NS', 'IOC.NS', 'IRCTC.NS', 'IRFC.NS', 'IREDA.NS', 'IGL.NS', 'INDUSTOWER.NS', 'INDUSINDBK.NS', 'NAUKRI.NS', 'INFY.NS', 'INOXWIND.NS', 'INDIGO.NS', 'JINDALSTEL.NS', 'JSWENERGY.NS', 'JSWSTEEL.NS', 'JIOFIN.NS', 'JUBLFOOD.NS', 'KEI.NS', 'KPITTECH.NS', 'KALYANKJIL.NS', 'KAYNES.NS', 'KFINTECH.NS', 'KOTAKBANK.NS', 'LTF.NS', 'LICHSGFIN.NS', 'LTIM.NS', 'LT.NS', 'LAURUSLABS.NS', 'LICI.NS', 'LODHA.NS', 'LUPIN.NS', 'M&M.NS', 'MANAPPURAM.NS', 'MANKIND.NS', 'MARICO.NS', 'MARUTI.NS', 'MFSL.NS', 'MAXHEALTH.NS', 'MAZDOCK.NS', 'MPHASIS.NS', 'MCX.NS', 'MUTHOOTFIN.NS', 'NBCC.NS', 'NCC.NS', 'NHPC.NS', 'NMDC.NS', 'NTPC.NS', 'NATIONALUM.NS', 'NESTLEIND.NS', 'NUVAMA.NS', 'OBEROIRLTY.NS', 'ONGC.NS', 'OIL.NS', 'PAYTM.NS', 'OFSS.NS', 'POLICYBZR.NS', 'PGEL.NS', 'PIIND.NS', 'PNBHOUSING.NS', 'PAGEIND.NS', 'PATANJALI.NS', 'PERSISTENT.NS', 'PETRONET.NS', 'PIDILITIND.NS', 'PPLPHARMA.NS', 'POLYCAB.NS', 'PFC.NS', 'POWERGRID.NS', 'PRESTIGE.NS', 'PNB.NS', 'RBLBANK.NS', 'RECLTD.NS', 'RVNL.NS', 'RELIANCE.NS', 'SBICARD.NS', 'SBILIFE.NS', 'SHREECEM.NS', 'SRF.NS', 'SAMMAANCAP.NS', 'MOTHERSON.NS', 'SHRIRAMFIN.NS', 'SIEMENS.NS', 'SOLARINDS.NS', 'SONACOMS.NS', 'SBIN.NS', 'SAIL.NS', 'SUNPHARMA.NS', 'SUPREMEIND.NS', 'SUZLON.NS', 'SYNGENE.NS', 'TATACONSUM.NS', 'TITAGARH.NS', 'TVSMOTOR.NS', 'TCS.NS', 'TATAELXSI.NS', 'TATAMOTORS.NS', 'TATAPOWER.NS', 'TATASTEEL.NS', 'TATATECH.NS', 'TECHM.NS', 'FEDERALBNK.NS', 'INDHOTEL.NS', 'PHOENIXLTD.NS', 'TITAN.NS', 'TORNTPHARM.NS', 'TORNTPOWER.NS', 'TRENT.NS', 'TIINDIA.NS', 'UNOMINDA.NS', 'UPL.NS', 'ULTRACEMCO.NS', 'UNIONBANK.NS', 'UNITDSPR.NS', 'VBL.NS', 'VEDL.NS', 'IDEA.NS', 'VOLTAS.NS', 'WIPRO.NS', 'YESBANK.NS', 'ZYDUSLIFE.NS' ] async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None: await update.message.reply_text("Live F&O stocks scan kar raha hoon condition ke liye (Volume spike, Green candle, Above 20SMA, Vol>10L)... Thoda wait!") matching_stocks = [] for symbol in FO_STOCKS: try: stock = yf.Ticker(symbol) data = stock.history(period='1d', interval='5m', prepost=True) if len(data) < 20: continue latest_volume = data['Volume'].iloc[-1] sma_vol_10 = data['Volume'].rolling(window=10).mean().iloc[-1] latest_close = data['Close'].iloc[-1] latest_open = data['Open'].iloc[-1] sma_close_20 = data['Close'].rolling(window=20).mean().iloc[-1] if (latest_volume > 2 * sma_vol_10) and \ (latest_close > latest_open) and \ (latest_close > sma_close_20) and \ (latest_volume > 1000000): matching_stocks.append(f"{symbol}: Vol={latest_volume:,.0f}, Price=₹{latest_close:.2f}") except Exception: continue if matching_stocks: message = "Live F&O Matching Stocks:\n" + "\n".join(matching_stocks[:15]) if len(matching_stocks) > 15: message += f"\n... Aur {len(matching_stocks)-15} stocks." else: message = "Abhi koi F&O stock condition match nahi kar raha. Market hours mein try karo!" await update.message.reply_text(message) await update.message.reply_text("Aur commands ke liye /help dekho.") async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None: await update.message.reply_text( "/start - Live F&O scan chalao (condition ke saath)\n" "/stock [ticker] - Stock price aur chart (e.g., /stock RELIANCE.NS)\n" "/scan_rsi - F&O mein RSI >70 wale\n" "Note: Intraday data yfinance se, delayed ho sakta hai." ) async def stock_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None: if not context.args: await update.message.reply_text("Ticker do, jaise /stock RELIANCE.NS") return ticker = context.args[0].upper() try: stock = yf.Ticker(ticker) end_date = datetime.now() start_date = end_date - timedelta(days=30) data = stock.history(start=start_date.strftime('%Y-%m-%d'), end=end_date.strftime('%Y-%m-%d')) if data.empty: await update.message.reply_text(f"{ticker} ka data nahi mila.") return latest_price = data['Close'].iloc[-1] plt.figure(figsize=(10, 5)) plt.plot(data.index, data['Close'], label='Close Price') plt.title(f'{ticker} - Last 30 Days') plt.xlabel('Date') plt.ylabel('Price') plt.legend() chart_file = f'{ticker}_chart.png' plt.savefig(chart_file) plt.close() await update.message.reply_text(f"{ticker} ka current price: ₹{latest_price:.2f}") with open(chart_file, 'rb') as photo: await update.message.reply_photo(photo=photo) os.remove(chart_file) await update.message.reply_text(f"More: https://finance.yahoo.com/quote/{ticker}") except Exception as e: await update.message.reply_text(f"Error: {str(e)}") def calculate_rsi(prices, window=14): delta = prices.diff() gain = (delta.where(delta > 0, 0)).rolling(window=window).mean() loss = (-delta.where(delta < 0, 0)).rolling(window=window).mean() rs = gain / loss rsi = 100 - (100 / (1 + rs)) return rsi.iloc[-1] async def scan_rsi_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None: await update.message.reply_text("F&O RSI >70 scan... Wait!") overbought_stocks = [] for symbol in FO_STOCKS: try: stock = yf.Ticker(symbol) end_date = datetime.now() start_date = end_date - timedelta(days=60) data = stock.history(start=start_date.strftime('%Y-%m-%d'), end=end_date.strftime('%Y-%m-%d')) if len(data) < 20: continue latest_rsi = calculate_rsi(data['Close']) if latest_rsi > 70: price = data['Close'].iloc[-1] overbought_stocks.append(f"{symbol}: RSI={latest_rsi:.2f}, Price=₹{price:.2f}") except Exception: continue if overbought_stocks: message = "F&O Overbought (RSI >70):\n" + "\n".join(overbought_stocks[:10]) if len(overbought_stocks) > 10: message += f"\n... Aur {len(overbought_stocks)-10}." else: message = "Koi overbought nahi." await update.message.reply_text(message) def main(): app = Application.builder().token(API_TOKEN).build() app.add_handler(CommandHandler("start", start)) app.add_handler(CommandHandler("help", help_command)) app.add_handler(CommandHandler("stock", stock_command)) app.add_handler(CommandHandler("scan_rsi", scan_rsi_command)) print("Live F&O Bot shuru! Ctrl+C to stop.") app.run_polling() if __name__ == '__main__': main()